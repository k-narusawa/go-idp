/* tslint:disable */
/* eslint-disable */
/**
 * Go-IdP
 * Go-IdP
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ClientRequest
 */
export interface ClientRequest {
    /**
     * クライアントID
     * @type {string}
     * @memberof ClientRequest
     */
    'client_id': string;
    /**
     * クライアントシークレット
     * @type {string}
     * @memberof ClientRequest
     */
    'client_secret': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRequest
     */
    'redirect_uris': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRequest
     */
    'grant_types': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRequest
     */
    'response_types': Array<string>;
    /**
     * クライアントがサポートするスコープ - openid: OpenID Connectのスコープ - offline: リフレッシュトークンを取得するためのスコープ 
     * @type {Array<string>}
     * @memberof ClientRequest
     */
    'scopes': Array<ClientRequestScopesEnum>;
}

export const ClientRequestScopesEnum = {
    Openid: 'openid',
    Offline: 'offline'
} as const;

export type ClientRequestScopesEnum = typeof ClientRequestScopesEnum[keyof typeof ClientRequestScopesEnum];

/**
 * 
 * @export
 * @interface ClientResponse
 */
export interface ClientResponse {
    /**
     * クライアントID
     * @type {string}
     * @memberof ClientResponse
     */
    'client_id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientResponse
     */
    'redirect_uris': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientResponse
     */
    'grant_types': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientResponse
     */
    'response_types': Array<string>;
    /**
     * クライアントがサポートするスコープ - openid: OpenID Connectのスコープ - offline: リフレッシュトークンを取得するためのスコープ 
     * @type {Array<string>}
     * @memberof ClientResponse
     */
    'scopes': Array<ClientResponseScopesEnum>;
}

export const ClientResponseScopesEnum = {
    Openid: 'openid',
    Offline: 'offline'
} as const;

export type ClientResponseScopesEnum = typeof ClientResponseScopesEnum[keyof typeof ClientResponseScopesEnum];


/**
 * ClientApi - axios parameter creator
 * @export
 */
export const ClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * clientの登録を行います
         * @summary client登録
         * @param {ClientRequest} clientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminClientsPost: async (clientRequest: ClientRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientRequest' is not null or undefined
            assertParamExists('adminClientsPost', 'clientRequest', clientRequest)
            const localVarPath = `/admin/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientApi - functional programming interface
 * @export
 */
export const ClientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientApiAxiosParamCreator(configuration)
    return {
        /**
         * clientの登録を行います
         * @summary client登録
         * @param {ClientRequest} clientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminClientsPost(clientRequest: ClientRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminClientsPost(clientRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClientApi.adminClientsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ClientApi - factory interface
 * @export
 */
export const ClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientApiFp(configuration)
    return {
        /**
         * clientの登録を行います
         * @summary client登録
         * @param {ClientRequest} clientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminClientsPost(clientRequest: ClientRequest, options?: any): AxiosPromise<ClientResponse> {
            return localVarFp.adminClientsPost(clientRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
export class ClientApi extends BaseAPI {
    /**
     * clientの登録を行います
     * @summary client登録
     * @param {ClientRequest} clientRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public adminClientsPost(clientRequest: ClientRequest, options?: RawAxiosRequestConfig) {
        return ClientApiFp(this.configuration).adminClientsPost(clientRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



